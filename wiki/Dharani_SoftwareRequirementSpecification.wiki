#summary Dharani project 의 requirement 를 기술한다.
#labels Phase-Requirements,Dharani

----

= Introduction =
Dharani project 는 clikec project 의 sub project 이다.
다양한 모델의 서버-클라이언트 네트워크 구성을 돕는 라이브러리를 개발한다.

= Requirement =

== Summary ==
간략히 정리하면 다음과 같은 요구사항을 갖는다.

 * 서버-클라이언트 시스템 구성을 제공한다.
 * 서버-클라이언트 간, 클라이언트-클라이언트 간의 1:1, 1:n 통신을 제공한다.
 * 서로 다른 사설 네트워크 하의 클라이언트 간에도 통신을 제공한다.
 * 패킷 감청 등에 의한 문제가 없도록, 연결 간에 보안을 보장한다.
 * 통신은 문장과 파일의 전송을 제공한다.


== Definition ==
 === 서버-클라이언트 시스템 구성을 제공한다. ===
  서버-클라이언트 시스템 구성을 제공한다. 이는 1:n 으로 구성된다.
  사용 *port 의 지정*으로 간단하게 *서버 세팅*이 가능해야 하며, *서버의 ip 주소와 사용 port 의 지정*으로 간단하게 *클라이언트*를 구성, 해당 서버로의 연결과 통신이 가능해야 한다.
  향후, 클라이언트의 경우 서버의 ip/port 를 굳이 알지 못하더라도, torrent 의 seed 와 같이 서버 설정 파일을 통해 서버 목록을 제공받고 선택 할 수 있어야 한다.

 === 서버-클라이언트 간, 클라이언트-클라이언트 간의 1:1, 1:n 통신을 제공한다. ===
  서버-클라이언트 간의 통신은 물론, 클라이언트 간의 통신 또한 제공되어야 하며, 1:1 통신 만이 아닌, 1:n의, bradcasting 이 가능해야 한다.
  broadcasting 에 대해 서버는 물론, 클라이언트에게도 수신 금지 기능이 제공되어야 한다. 이 때, 클라이언트는 서버의 broadcasting 수신을 금지 요청 할 수 있지만, 서버는 특별한 경우에 한해 이를 무시하고 broadcasting 할 수 있어야 한다(*broadcasting 에 priority* 가 있어야 한다).

 === 서로 다른 사설 네트워크 하의 클라이언트 간에도 통신을 제공한다. ===
  서버가 속한 네트워크 하위의 서로 다른 사설 네트워크에 클라이언트가 위치해 있다면, 해당 클라이언트 끼리는 서로 속한 사설 네트워크가 서로 다르더라도 통신이 가능해야 한다.
  서로 다른 사설망에 있는 호스트 간의 통신은 기본적으로 불가능하다. 클라이언트 간의 통신이 서버를 통해 이루어지게 함으로써, 서버 아래 단의 사설망이라면 서로 다른 사설망의 클라이언트 간에도 통신이 가능하도록 한다.
  때문에, 서버가 공인 ip 주소를 가질 것을 권장하지만, 공인 ip 주소가 아니더라도 하위 사설망 간의 통신은 제공한다.

 === 패킷 감청 등에 의한 문제가 없도록, 연결 간에 보안을 보장한다. ===
  통신 간에 신뢰성 있는 수준의 보안을 제공한다.
  공개된 소스임을 감안해, 소스 코드 분석만으로 보안 기능이 해체되지 않을 수 있도록, run time 에서 보안 시스템 생성(암호/복호화 키 생성)이 가능하도록 한다.

 === 통신은 문장과 파일의 전송을 제공한다. ===
  내부 프로토콜 자체에서, 문장(plain text)과 파일의 전송을 제공한다.
  파일/문자의 전송 시, 전송 중 데이터가 깨지지 않도록, 전송 상의 무결성을 제공해야 한다.



= 산출물 =
프로젝트의 1차 산출물은 소스 코드이다.
소스 코드는 clikec 의 기본 라이센스에 맞게 공개된다.

부차적으로, dll이나 공유 라이브러리 형태 로 개발될 경우, 빌드 완료된 바이너리 파일 또한 공개된다.


== Licenses ==
Dharani 프로젝트는 clikec 프로젝트의 License 를 동일하게 따른다.

= 배포 방식 =
배포는 본 프로젝트 hosting 페이지로 이루어진다.
source code/source code에 밀접하게 연관된 문서는 Software Configuration Management tool 을 통해,
문서는 wiki page 를 통해,
최종 바이너리는 download를 통해 배포될 것이다.

모든 산출물이 실시간으로 배포되진 않을 것이며, 배포 방식은 언제든지 바뀔 수 있다.